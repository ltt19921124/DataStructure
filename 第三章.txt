			第三章 线性表

	线性表(List)：零个或多个数据元素的有限序列
	
	首先它是一个序列，元素之间是有顺序的，第一个元素无前驱，最后一个无后继，其他元素
	都有且只有一个前驱和后继。
	
	线性表元素的个数n定义为线性表的长度，n=0时，称为空表。
	
	线性表的顺序存储结构，指的是用一段地址连续的存储单元依次存储线性表的数据元素
	
	数组长度和线性表的长度
	数组长度：存放线性表的存储空间的长度，存储分配后一般不变
	线性表长度：线性表中数据元素的个数，随着线性表插入和删除操作进行这个量是会变化
	的。在任意时刻，线性表的长度应该小于等于数组的长度。

	3.4.4 地址计算算法
	线性表的线性存储结构
	
	线性表的顺序存储结构优点：1，无须为表中的元素之间的逻辑关系而增加额外的存储空间
	2，可以快速地存取表中任一位置的元素
	线性表的顺序存储结构缺点：1，插入和删除要移动大量元素，2，当线性表长度变化较大时，
	难以确定存储空间的容量。3，会造成存储空间的"碎片"

	线性表的链式存储结构：
		用一组任意的存储单元存储线性表的数据元素，这存储单元可以是连续的，也可以是
	不连续的，这就意味着，这些元素可以存在内存中未被占用的任意位置。在链式结构中，每个元	素要存储元素信息外，还要存储它的后继元素的存储地址。
	存储数据元素信息的域称为数据域，把存储直接后继位置的域称为指针域。指针域中存储的信息
	称作指针或链。这两部分信息组成数据元素ai的存储映像，称为结点(Node)。n个结点链结成一	个链表，即为线性表的链式存储结构。因此链表的每个结点中只包含一个指针域，所以叫单链表	。单链表是通过每个结点的指针域将线性表的数据元素按其逻辑次序连接在一起。

	把链表中的第一个结点的存储位置叫头指针。链表的存取就是从头指针开始进行，头结点的数据	域可以不存储任何信息。也可以存储线性表的长度等附加信息。
	。之后的每一个结点，其实就是上一个的后继指针指向的位置。最后一个结点，没有直接后继，	所以规定，线性表的最后一个结点指针为"空"(通常用null或"^"来表示，)

	第一个结点(首元结点、“正式”的第一个结点、链表的开始结点)

	头结点：为了方便操作链表而附设的，头结点的数据域通常用来保存跟链表有关的信息，比如
	链表长度，


	头指针：是指向链表的基地址，如果链表存在头结点则头指针就是指向头结点，若线性表为空，
	则头结点的指针域为"空"。
	
	头指针是链表必要元素，头结点不一定是链表必要元素。无头结点链表则头指针就直接指向第一	个结点(首元结点)。
	
	循环链表是另一种形式的链式存贮结构。它的特点是表中最后一个结点的指针域指向头结点，整	个链表形成一个环。
	
	双向链表是是在单链表的每个结点中，再设置一个指向其前驱结点的指针域。所以在双向链表中	的结点都有两个指针域，一个指向直接后继，另一个直接指向直接前驱。


	

